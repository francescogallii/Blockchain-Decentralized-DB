services:
  # --- NGINX REVERSE PROXY & ENTRYPOINT ---
  nginx:
    image: nginx:stable-alpine
    container_name: blockchain-nginx
    ports:
      # Espone la porta HTTP standard per l'accesso esterno
      - "80:80" 
      # Espone la porta API del nodo 1 come fallback
      - "4001:4001" 
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - blockchain-network
    depends_on:
      - node1
      - frontend
    restart: always

  # --- NODO 1 (API & P2P HUB) ---
  postgres1:
    image: postgres:16-alpine
    container_name: blockchain-postgres-1
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # Monteggio volume per persistenza dati
      - postgres_data_1:/var/lib/postgresql/data
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  node1:
    build: ./backend
    container_name: blockchain-node-1
    environment:
      - PORT=4001
      - P2P_PORT=6001
      # Connessione al proprio database
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres1:5432/${POSTGRES_DB}
      - PEERS=ws://node2:6002,ws://node3:6003
      - NODE_ENV=${NODE_ENV:-development}
      - DIFFICULTY=${DIFFICULTY:-4}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    # Montaggio volume per il codice in sviluppo
    volumes:
      - ./backend/src:/app/src
    # Porta P2P mappata all'esterno rimossa
    # ports:
    #   - "6001:6001" 
    networks:
      - blockchain-network
    depends_on:
      postgres1:
        condition: service_healthy
    restart: unless-stopped

  # --- NODO 2 (VALIDATORE) ---
  postgres2:
    image: postgres:16-alpine
    container_name: blockchain-postgres-2
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data_2:/var/lib/postgresql/data
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  node2:
    build: ./backend
    container_name: blockchain-node-2
    environment:
      - PORT=4002 # Porta API interna
      - P2P_PORT=6002
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres2:5432/${POSTGRES_DB}
      - PEERS=ws://node1:6001,ws://node3:6003
      - NODE_ENV=${NODE_ENV:-development}
      - DIFFICULTY=${DIFFICULTY:-4}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./backend/src:/app/src
    # Porta P2P mappata all'esterno rimossa
    # ports:
    #   - "6002:6002"
    networks:
      - blockchain-network
    depends_on:
      postgres2:
        condition: service_healthy
    restart: unless-stopped

  # --- NODO 3 (VALIDATORE) ---
  postgres3:
    image: postgres:16-alpine
    container_name: blockchain-postgres-3
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data_3:/var/lib/postgresql/data
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  node3:
    build: ./backend
    container_name: blockchain-node-3
    environment:
      - PORT=4003 # Porta API interna
      - P2P_PORT=6003
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres3:5432/${POSTGRES_DB}
      - PEERS=ws://node1:6001,ws://node2:6002
      - NODE_ENV=${NODE_ENV:-development}
      - DIFFICULTY=${DIFFICULTY:-4}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./backend/src:/app/src
    # Porta P2P mappata all'esterno rimossa
    # ports:
    #   - "6003:6003"
    networks:
      - blockchain-network
    depends_on:
      postgres3:
        condition: service_healthy
    restart: unless-stopped

  # --- FRONTEND (Si collega a Nginx) ---
  frontend:
    build: 
      context: ./frontend
      # Passa l'URL base al frontend (per Vite)
      args:
        - VITE_API_BASE_URL=http://localhost:80 
    container_name: blockchain-frontend
    environment:
      # L'applicazione Node.js in esecuzione nel container ha bisogno di sapere dove trovare l'API
      - VITE_API_BASE_URL=http://localhost:80 
    # CORREZIONE: Aggiunto DNS esplicito per una risoluzione di rete pi√π rapida
    dns:
      - 8.8.8.8
      - 1.1.1.1
    volumes:
      # Montaggio per sviluppo
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    networks:
      - blockchain-network
    depends_on:
      - node1 
    restart: unless-stopped

volumes:
  postgres_data_1:
  postgres_data_2:
  postgres_data_3:

networks:
  blockchain-network:
    driver: bridge